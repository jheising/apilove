{"version":3,"file":"APIDocs.js","sourceRoot":"","sources":["APIDocs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,wCAA4H;AAC5H,mCAAmC;AACnC,6BAA6B;AAC7B,mCAA8C;AAC9C,+BAA+B;AAC/B,mDAAmD;AACnD,8DAAyD;AAmBzD,MAAa,OAAO;IAEhB,MAAM,CAAC,aAAa,CAAC,OAAuB;QACxC,IAAI,OAAO,GAAmB;YAC1B,QAAQ,EAAE,YAAG,CAAC,OAAO,EAAE,MAAM,CAAC;YAC9B,IAAI,EAAE,EAAE;SACX,CAAC;QAEF,IAAI,WAAW,GAAG,iBAAO,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAElD,KAAK,IAAI,QAAQ,IAAI,WAAW,EAAE;YAC9B,IAAI,YAAG,CAAC,QAAQ,EAAE,iBAAiB,CAAC,EAAE;gBAElC,IAAI,OAAO,GAAe;oBACtB,QAAQ,EAAE,YAAG,CAAC,QAAQ,EAAE,iBAAiB,CAAC;oBAC1C,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,SAAS,EAAE,EAAE;iBAChB,CAAC;gBAEF,IAAI,YAAG,CAAC,QAAQ,EAAE,iBAAiB,CAAC,EAAE;oBAClC,KAAI,IAAI,cAAc,IAAI,QAAQ,CAAC,eAAe,EAClD;wBACI,IAAI,YAAG,CAAC,cAAc,EAAE,MAAM,CAAC,EAAE;4BAC7B,IAAI,YAAY,GAAuB;gCACnC,QAAQ,EAAE,cAAc,CAAC,IAAI;gCAC7B,MAAM,EAAE,YAAG,CAAC,cAAc,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,WAAW,EAAE;gCAC1D,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,cAAc,CAAC,IAAI,CAAC;6BACtD,CAAC;4BAEF,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;yBACxC;qBACJ;iBACJ;gBAED,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC9B;SAEJ;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;IAMD,MAAM,CAAO,UAAU,CAAC,GAAG,EAAE,GAAG;;YAE5B,IAAI,OAAO,GAAuB,qBAAY,CAAC,YAAG,CAAC,GAAG,EAAE,sBAAsB,EAAE,EAAE,CAAC,EAAE;gBACjF,KAAK,EAAE,UAAU;aACE,CAAC,CAAC;YAEzB,IAAI,YAAY,GAAG,KAAK,CAAC,aAAa,CAAC,eAAM,EAAE;gBAC3C,OAAO,EAAE,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC;aACtD,CAAC,CAAC;YAEH,IAAI,SAAS,GAAG;;;;;aAKX,OAAO,CAAC,KAAK;;;;mBAIP,cAAc,CAAC,oBAAoB,CAAC,YAAY,CAAC;;QAE5D,CAAC;YAED,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;YACrC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACrB,GAAG,CAAC,GAAG,EAAE,CAAC;QACd,CAAC;KAAA;CACJ;AA3BG;IAJC,qBAAW,CAAC;QACT,IAAI,EAAE,GAAG;QACT,UAAU,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC,CAAC;KAC3E,CAAC;;;;+BA2BD;AAxEL,0BAyEC","sourcesContent":["import {APIDocsOptions, APIEndpoint, APIEndpointDocsOptions, APILove, APILoveDocsOptions, APILoveOptions} from \"../APILove\";\nimport * as express from \"express\";\nimport * as path from \"path\";\nimport {defaultsDeep, get, has} from \"lodash\";\nimport * as React from \"react\";\nimport * as ReactDOMServer from \"react-dom/server\";\nimport {DocApp} from \"./DocGeneration/components/DocApp\";\n\nexport interface APIEndpointDocData {\n    overview: APIEndpointDocsOptions;\n    method: string;\n    path: string;\n}\n\nexport interface APIDocData {\n    overview: APIDocsOptions;\n    path: string;\n    endpoints: APIEndpointDocData[];\n}\n\nexport interface APILoveDocData {\n    overview: APILoveDocsOptions;\n    apis: APIDocData[];\n}\n\nexport class APIDocs {\n\n    static getAPIDocData(options: APILoveOptions): APILoveDocData {\n        let docData: APILoveDocData = {\n            overview: get(options, \"docs\"),\n            apis: []\n        };\n\n        let apiMetadata = APILove.getAPIMetadata(options);\n\n        for (let metadata of apiMetadata) {\n            if (has(metadata, \"apiOptions.docs\")) {\n\n                let apiDocs: APIDocData = {\n                    overview: get(metadata, \"apiOptions.docs\"),\n                    path: metadata.path,\n                    endpoints: []\n                };\n\n                if (has(metadata, \"endpointOptions\")) {\n                    for(let endpointOption of metadata.endpointOptions)\n                    {\n                        if (has(endpointOption, \"docs\")) {\n                            let endpointDocs: APIEndpointDocData = {\n                                overview: endpointOption.docs,\n                                method: get(endpointOption, \"method\", \"GET\").toUpperCase(),\n                                path: path.join(metadata.path, endpointOption.path)\n                            };\n\n                            apiDocs.endpoints.push(endpointDocs);\n                        }\n                    }\n                }\n\n                docData.apis.push(apiDocs);\n            }\n\n        }\n\n        return docData;\n    }\n\n    @APIEndpoint({\n        path: \"*\",\n        middleware: [express.static(path.join(__dirname, \"DocGeneration/dist\"))]\n    })\n    static async renderDocs(req, res) {\n\n        let apiDocs: APILoveDocsOptions = defaultsDeep(get(req, \"APILove.options.docs\", {}), {\n            title: \"API Docs\"\n        } as APILoveDocsOptions);\n\n        let docComponent = React.createElement(DocApp, {\n            docData: APIDocs.getAPIDocData(req.APILove.options)\n        });\n\n        let docString = `<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>${apiDocs.title}</title>\n    <link rel=\"stylesheet\" href=\"css/styles.css\">\n  </head>\n  <body>\n  <div id=\"root\">${ReactDOMServer.renderToStaticMarkup(docComponent)}</div>\n  </body>\n</html>`;\n\n        res.set('Content-Type', 'text/html');\n        res.write(docString);\n        res.end();\n    }\n}"]}