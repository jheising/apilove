{"version":3,"file":"APIConfig.js","sourceRoot":"","sources":["APIConfig.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,oCAAsC;AAEtC,4CAA6C;AAE7C;IAAA;IAiEA,CAAC;IAhEG,8DAA8D;IAEvD,kBAAQ,GAAW,IAAI,CAAC;IAE/B,6FAA6F;IAEtF,sBAAY,GAAW,sBAAmB,SAAS,CAAC,QAAQ,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAI,SAAS,CAAC,QAAU,CAAE,CAAC;IAE7G,0HAA0H;IAEnH,wBAAc,GAAY,IAAI,CAAC;IAEtC,mHAAmH;IAE5G,uBAAa,GAAY,CAAC,QAAQ,CAAC;IAE1C,uKAAuK;IAEhK,4BAAkB,GAAY,KAAK,CAAC;IAE3C,wEAAwE;IAEjE,wBAAc,GAAY,KAAK,CAAC;IAEvC,wEAAwE;IAEjE,wBAAc,GAAY,IAAI,CAAC;IAEtC,yGAAyG;IAElG,6BAAmB,GAAY,IAAI,CAAC;IAGpC,oBAAU,GAAW,WAAW,CAAC;IAExC,sBAAsB;IAEf,2BAAiB,GAAU,kCAAkC,CAAC;IAErE,uFAAuF;IAEhF,qCAA2B,GAA8D,eAAe,CAAC;IAEhH,2DAA2D;IAEpD,mCAAyB,GAAW,WAAW,CAAC;IAEvD,wEAAwE;IAEjE,yBAAe,GAAW,IAAI,CAAC;IAMtC,kFAAkF;IAE3E,uCAA6B,GAAwC,iBAAiB,CAAC;IAGvF,qCAA2B,GAAW,QAAQ,CAAC;IA1DtD;QADC,mBAAU;;qCACoB;IAI/B;QADC,mBAAU;;yCACkG;IAI7G;QADC,mBAAU;;2CAC2B;IAItC;QADC,mBAAU;;0CAC+B;IAI1C;QADC,mBAAU;;+CACgC;IAI3C;QADC,mBAAU;;2CAC4B;IAIvC;QADC,mBAAU;;2CAC2B;IAItC;QADC,mBAAU;;gDACgC;IAG3C;QADC,mBAAU;;uCAC6B;IAIxC;QADC,mBAAU;;8CAC0D;IAIrE;QADC,mBAAU;;wDACqG;IAIhH;QADC,mBAAU;;sDAC4C;IAIvD;QADC,mBAAU;;4CAC2B;IAItC;QADC,mBAAU;;yDACiC;IAI5C;QADC,mBAAU;;0DACmF;IAG9F;QADC,mBAAU;;wDAC2C;IAGtD;QADC,mBAAU;;wDACgC;IAC/C,gBAAC;CAAA,AAjED,IAiEC;AAjEY,8BAAS","sourcesContent":["import * as isLambda from \"is-lambda\";\nimport {get} from \"lodash\";\nimport {EnvVarSync} from \"./Services/Config\";\n\nexport class APIConfig {\n    // If running as a server, this is the port that will be used.\n    @EnvVarSync\n    static WEB_PORT: number = 3000;\n\n    // The root URL for this API, this must be changed when it gets pushed to your production API\n    @EnvVarSync\n    static API_URL_BASE: string = `http://localhost${APIConfig.WEB_PORT === 80 ? \"\" : `:${APIConfig.WEB_PORT}`}`;\n\n    // If set to true, APIs will only be loaded when they are accessed. This can cut down on memory used in a lambda function.\n    @EnvVarSync\n    static LAZY_LOAD_APIS: boolean = true;\n\n    // Used to force the API to run as a server, otherwise it will run as a lambda function when deployed serverlessly.\n    @EnvVarSync\n    static RUN_AS_SERVER: boolean = !isLambda;\n\n    // If set to true, raw error messages will be included in errors output from the API. This can be useful for debugging, but should usually be turned off in production.\n    @EnvVarSync\n    static DISPLAY_RAW_ERRORS: boolean = false;\n\n    // If set to true, this will log all 400 status errors to console.error.\n    @EnvVarSync\n    static LOG_400_ERRORS: boolean = false;\n\n    // If set to true, this will log all 500 status errors to console.error.\n    @EnvVarSync\n    static LOG_500_ERRORS: boolean = true;\n\n    // Slightly more developer (i.e. mostly human) friendly API results. See https://github.com/jheising/HAPI\n    @EnvVarSync\n    static OUTPUT_HAPI_RESULTS: boolean = true;\n\n    @EnvVarSync\n    static AWS_REGION: string = \"us-east-1\";\n\n    // TODO: CHANGE THIS!!\n    @EnvVarSync\n    static ENCRYPTION_SECRET:string = \"E1E8A96B838495F8CD1310304361C741\";\n\n    // This is the key-value storage service provider to use with your API (if you need it)\n    @EnvVarSync\n    static KV_STORAGE_SERVICE_PROVIDER: \"MemoryKVService\" | \"DiskKVService\" | \"DynamoDBKVService\" = \"DiskKVService\";\n\n    // The storage path to be used when using the DiskKVService\n    @EnvVarSync\n    static DISK_KV_STORAGE_ROOT_PATH: string = \"./data/kv\";\n\n    // If set to true this will encrypt data stored in the Key-Value Service\n    @EnvVarSync\n    static ENCRYPT_KV_DATA:boolean = true;\n\n    // The table name to use when storing key-value data in DynamoDB\n    @EnvVarSync\n    static DYNAMO_KV_STORAGE_TABLE_NAME: string;\n\n    // This is the file storage service provider to use with your API (if you need it)\n    @EnvVarSync\n    static FILE_STORAGE_SERVICE_PROVIDER: \"DiskFileService\" | \"S3FileService\" = \"DiskFileService\";\n\n    @EnvVarSync\n    static DISK_FILE_SERVICE_ROOT_PATH: string = \"./data\";\n\n    @EnvVarSync\n    static S3_FILE_SERVICE_BUCKET_NAME: string;\n}"]}