{"version":3,"file":"DataUtils.js","sourceRoot":"","sources":["DataUtils.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,2CAAsC;AAEtC;IAMI,MAAM,CAAC,OAAO,CAAC,IAAY,EAAE,WAAkB,qBAAS,CAAC,iBAAiB;QACtE,IAAI,EAAE,GAAG,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAClD,IAAI,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;QACrF,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEpC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACvD,OAAO,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAChE,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,IAAY,EAAE,WAAkB,qBAAS,CAAC,iBAAiB;QACtE,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,CAAC;QAC/C,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;QAC5D,IAAI,QAAQ,GAAG,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;QACzF,IAAI,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAE/C,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACzD,OAAO,SAAS,CAAC,QAAQ,EAAE,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,MAAa;QAE3B,IAAI,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACtB,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,MAAa;QAExB,IAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACnC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACnB,OAAO,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;;AApCc,oBAAU,GAAG,EAAE,CAAC;AAChB,qBAAW,GAAG,aAAa,CAAC;AAC5B,mBAAS,GAAG,QAAQ,CAAC;AAJxC,8BAuCC","sourcesContent":["import * as crypto from \"crypto\";\nimport {APIConfig} from \"./APIConfig\";\n\nexport class DataUtils {\n\n    private static _IV_LENGTH = 16;\n    private static _CRYPTO_ALG = 'aes-256-cbc';\n    private static _HASH_ALG = 'sha256';\n\n    static encrypt(text: string, password:string = APIConfig.ENCRYPTION_SECRET) {\n        let iv = crypto.randomBytes(DataUtils._IV_LENGTH);\n        let cipher = crypto.createCipheriv(DataUtils._CRYPTO_ALG, Buffer.from(password), iv);\n        let encrypted = cipher.update(text);\n\n        encrypted = Buffer.concat([encrypted, cipher.final()]);\n        return iv.toString('hex') + ':' + encrypted.toString('hex');\n    }\n\n    static decrypt(text: string, password:string = APIConfig.ENCRYPTION_SECRET) {\n        let textParts = text.split(':');\n        let iv = Buffer.from(textParts.shift(), 'hex');\n        let encryptedText = Buffer.from(textParts.join(':'), 'hex');\n        let decipher = crypto.createDecipheriv(DataUtils._CRYPTO_ALG, Buffer.from(password), iv);\n        let decrypted = decipher.update(encryptedText);\n\n        decrypted = Buffer.concat([decrypted, decipher.final()]);\n        return decrypted.toString();\n    }\n\n    static hashString(string:string)\n    {\n        let shasum = crypto.createHash(DataUtils._HASH_ALG);\n        shasum.update(string);\n        return shasum.digest('hex');\n    }\n\n    static hashMD5(string:string)\n    {\n        let md5 = crypto.createHash('md5');\n        md5.update(string);\n        return md5.digest('hex');\n    }\n}"]}