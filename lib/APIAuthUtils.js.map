{"version":3,"file":"APIAuthUtils.js","sourceRoot":"","sources":["APIAuthUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport isNil from \"lodash/isNil\";\nimport {APIConfig} from \"./APIConfig\";\n\nexport class APIAuthCredentials {\n    isAuthenticated: boolean;\n    userID?: string;\n    userName?: string;\n    expires?: number;\n    refreshToken?: string;\n\n    rawJWTPayload?: object;\n}\n\nexport class APIAuthUtils {\n\n    static setJWTSessionCookie(res, jwtToken: string, domain: string) {\n        let expiration = new Date(Number(new Date()) + 1.577e+11);\n        res.cookie(\"session\", jwtToken, {domain: domain, expires: expiration, httpOnly: true});\n    }\n\n    static deleteJWTSessionCookie(res, domain: string) {\n        let expiration = new Date();\n        res.cookie(\"session\", \"\", {domain: domain, expires: expiration, httpOnly: true});\n    }\n\n    private static getAuthCredentialsFromJWT(token: string, ignoreExpiration: boolean = true): APIAuthCredentials {\n        let authCreds: APIAuthCredentials = {\n            isAuthenticated: false\n        };\n\n        if (!token) {\n            return authCreds;\n        }\n\n        try {\n            const decodedAuthToken = jwt.verify(token, APIConfig.JWT_SECRET, {ignoreExpiration});\n            authCreds.isAuthenticated = true;\n            authCreds.userName = decodedAuthToken.u;\n            authCreds.userID = decodedAuthToken.i;\n            authCreds.refreshToken = decodedAuthToken.r;\n            authCreds.expires = decodedAuthToken.exp / 1000;\n            authCreds.rawJWTPayload = decodedAuthToken;\n        } catch (err) {\n        }\n\n        return authCreds;\n    }\n\n    static getJWTFromRequest(req): string {\n\n        let token;\n\n        // try getting the auth info from the cookie first\n        if (req.cookies) {\n            token = req.cookies.session;\n        }\n\n        if (isNil(token)) {\n            // Try getting from the Authorization header next\n            token = req.get(\"Authorization\");\n\n            if (!isNil(token)) {\n                token = token.replace(/^Bearer\\s/, \"\");\n            }\n        }\n\n        return token;\n    }\n\n    static getAuthCredentialsFromRequest(req, allowExpired: boolean = false): APIAuthCredentials {\n        return APIAuthUtils.getAuthCredentialsFromJWT(APIAuthUtils.getJWTFromRequest(req));\n    }\n\n    static createJWT(userID: string, username: string, refreshToken: string, expiresIn: string | number = \"1h\", extraData: object = {}): string {\n\n        let options = undefined;\n\n        if (expiresIn) {\n            options = {\n                expiresIn: expiresIn\n            }\n        }\n\n        return jwt.sign({\n            i: userID,\n            u: username,\n            r: refreshToken,\n            ...extraData\n        }, APIConfig.JWT_SECRET, options);\n    }\n}"]}