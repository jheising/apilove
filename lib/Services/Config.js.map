{"version":3,"file":"Config.js","sourceRoot":"","sources":["Config.ts"],"names":[],"mappings":";;AAAA,mCAA6B;AAC7B,oCAA+B;AAC/B,4BAA0B;AAE1B,oBAA2B,MAAW,EAAE,GAAW;IAE/C,IAAI,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAE9B,gDAAgD;IAChD,IAAG,CAAC,cAAK,CAAC,MAAM,CAAC,EACjB;QACI,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;QAC/D,IAAI,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC;QAE9B,IACA;YACI,MAAM,CAAC,GAAG,CAAC,GAAG,aAAK,CAAC,aAAa,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;SACxD;QACD,OAAO,CAAC,EAAE;YACN,OAAO,CAAC,KAAK,CAAC,8CAA8C,GAAG,EAAE,CAAC,CAAC;SACtE;KACJ;IACD,sEAAsE;SAEtE;QACI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;KAClC;AACL,CAAC;AAvBD,gCAuBC","sourcesContent":["import {isNil} from \"lodash\";\nimport {Utils} from \"../Utils\";\nimport \"reflect-metadata\";\n\nexport function EnvVarSync(target: any, key: string)\n{\n    let envVar = process.env[key];\n\n    // If we have an environment var defined, use it\n    if(!isNil(envVar))\n    {\n        let metadata = Reflect.getMetadata(\"design:type\", target, key);\n        let paramType = metadata.name;\n\n        try\n        {\n            target[key] = Utils.convertToType(envVar, paramType);\n        }\n        catch (e) {\n            console.error(`Unable to parse environment variable named ${key}`);\n        }\n    }\n    // If we don't have an env var defined, assign the value of this to it\n    else\n    {\n        process.env[key] = target[key];\n    }\n}"]}