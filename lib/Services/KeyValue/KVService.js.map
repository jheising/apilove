{"version":3,"file":"KVService.js","sourceRoot":"","sources":["KVService.ts"],"names":[],"mappings":";;AAAA,+CAA0C;AAE1C;IAEI,MAAM,KAAK,QAAQ;QAEf,IAAG,CAAC,SAAS,CAAC,SAAS,EAAE;YACrB,IAAI,eAAe,GAAG,OAAO,CAAC,KAAK,qBAAS,CAAC,2BAA2B,EAAE,CAAC,CAAC,qBAAS,CAAC,2BAA2B,CAAC,CAAC;YACnH,SAAS,CAAC,SAAS,GAAG,IAAI,eAAe,EAAE,CAAC;SAC/C;QAED,OAAO,SAAS,CAAC,SAAS,CAAC;IAC/B,CAAC;CAOJ;AAjBD,8BAiBC","sourcesContent":["import {APIConfig} from \"../../APIConfig\";\n\nexport abstract class KVService {\n    private static _instance:KVService;\n    static get instance():KVService\n    {\n        if(!KVService._instance) {\n            let kvProviderClass = require(`./${APIConfig.KV_STORAGE_SERVICE_PROVIDER}`)[APIConfig.KV_STORAGE_SERVICE_PROVIDER];\n            KVService._instance = new kvProviderClass();\n        }\n\n        return KVService._instance;\n    }\n\n    abstract setValue(namespace:string, key:string, value:any, expirationInSeconds:number, done:(error?:Error) => void);\n    abstract getValue(namespace:string, key:string, done:(error?:Error, value?:any) => void);\n    abstract deleteValue(namespace:string, key:string, done:(error?:Error) => void);\n    abstract hasValue(namespace:string, key:string, done:(error?:Error, hasValue?:boolean) => void);\n    abstract updateExpiration(namespace:string, key:string, expirationInSeconds:number, done:(error?:Error) => void);\n}"]}