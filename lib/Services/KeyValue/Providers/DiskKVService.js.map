{"version":3,"file":"DiskKVService.js","sourceRoot":"","sources":["DiskKVService.ts"],"names":[],"mappings":"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","sourcesContent":["import {isNil} from \"lodash\";\nimport {KVServiceProvider} from \"../KVService\";\nimport {DiskFileService} from \"../../File/Providers/DiskFileService\";\nimport {APIConfig} from \"../../../APIConfig\";\nimport {APIUtils} from \"../../../APIUtils\";\n\n\nexport class DiskKVService extends KVServiceProvider {\n    private static _fileServiceInstance: DiskFileService\n\n    private static get _fileService(): DiskFileService {\n        let service = DiskKVService._fileServiceInstance;\n\n        if (isNil(service)) {\n            service = new DiskFileService(APIConfig.DISK_KV_STORAGE_ROOT_PATH);\n            DiskKVService._fileServiceInstance = service;\n        }\n\n        return service;\n    }\n\n    setValue(namespace: string, key: string, value: any, expirationInSeconds: number):Promise<void> {\n\n        let data = {\n            value: value,\n            expires: isNil(expirationInSeconds) ? undefined : Date.now() + expirationInSeconds * 1000,\n        };\n\n        return DiskKVService._fileService.writeFile(`${APIUtils.slugify(namespace)}/${APIUtils.slugify(key)}.json`, JSON.stringify(data));\n    }\n\n    hasValue(namespace: string, key: string):Promise<boolean> {\n        return DiskKVService._fileService.pathExists(`${APIUtils.slugify(namespace)}/${APIUtils.slugify(key)}.json`);\n    }\n\n    private _getValue(namespace: string, key: string):Promise<{value:any, expires:number}> {\n        return DiskKVService._fileService.readFile(`${APIUtils.slugify(namespace)}/${APIUtils.slugify(key)}.json`).then((fileContents) => {\n            let data = JSON.parse(fileContents);\n            return Promise.resolve(data);\n        }).catch(() => {\n            return;\n        });\n    }\n\n    getValue(namespace: string, key: string):Promise<any> {\n        return this._getValue(namespace, key).then((data) => {\n\n            if(isNil(data))\n            {\n                return Promise.resolve();\n            }\n\n            if(data.expires && data.expires <= Date.now())\n            {\n                return this.deleteValue(namespace, key).then(() => Promise.resolve(data.value));\n            }\n\n            return Promise.resolve(data.value);\n        });\n    }\n\n    deleteValue(namespace: string, key: string):Promise<void> {\n        try {\n            return DiskKVService._fileService.deleteFile(`${APIUtils.slugify(namespace)}/${APIUtils.slugify(key)}.json`);\n        }\n        // Ignore any errors\n        catch (e) {\n            return Promise.resolve();\n        }\n    }\n\n    updateExpiration(namespace: string, key: string, expirationInSeconds: number):Promise<void> {\n        return this._getValue(namespace, key).then((data) => {\n\n            if(isNil(data))\n            {\n                return Promise.resolve();\n            }\n\n            return this.setValue(namespace, key, data.value, expirationInSeconds);\n        });\n    }\n}"]}