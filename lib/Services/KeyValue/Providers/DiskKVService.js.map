{"version":3,"file":"DiskKVService.js","sourceRoot":"","sources":["DiskKVService.ts"],"names":[],"mappings":"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","sourcesContent":["import {isNil} from \"lodash\";\nimport {KVServiceProvider, KVServiceValues, KVServiceValue} from \"../KVService\";\nimport {DiskFileService} from \"../../File/Providers/DiskFileService\";\nimport {APIConfig} from \"../../../APIConfig\";\nimport {APIUtils} from \"../../../APIUtils\";\n\n\nexport class DiskKVService extends KVServiceProvider {\n    private static _fileServiceInstance: DiskFileService\n\n    private static get _fileService(): DiskFileService {\n        let service = DiskKVService._fileServiceInstance;\n\n        if (isNil(service)) {\n            service = new DiskFileService(APIConfig.DISK_KV_STORAGE_ROOT_PATH);\n            DiskKVService._fileServiceInstance = service;\n        }\n\n        return service;\n    }\n\n    setValue(namespace: string, key: string, value: any, expirationInSeconds: number): Promise<void> {\n\n        let data = {\n            key: key,\n            value: value,\n            expires: isNil(expirationInSeconds) ? undefined : Date.now() + expirationInSeconds * 1000,\n        };\n\n        return DiskKVService._fileService.writeFile(`${APIUtils.slugify(namespace)}/${APIUtils.slugify(key)}.json`, JSON.stringify(data));\n    }\n\n    hasValue(namespace: string, key: string): Promise<boolean> {\n        return DiskKVService._fileService.pathExists(`${APIUtils.slugify(namespace)}/${APIUtils.slugify(key)}.json`);\n    }\n\n    private _getValue(namespace: string, key: string): Promise<{ value: any, expires: number }> {\n        return DiskKVService._fileService.readFile(`${APIUtils.slugify(namespace)}/${APIUtils.slugify(key)}.json`).then((fileContents) => {\n            let data = JSON.parse(fileContents);\n            return Promise.resolve(data);\n        }).catch(() => {\n            // Ignore errors\n            return;\n        });\n    }\n\n    getValue(namespace: string, key: string): Promise<any> {\n        return this._getValue(namespace, key).then((data) => {\n\n            if (isNil(data)) {\n                return Promise.resolve();\n            }\n\n            if (data.expires && data.expires <= Date.now()) {\n                return this.deleteValue(namespace, key).then(() => Promise.resolve(data.value));\n            }\n\n            return Promise.resolve(data.value);\n        });\n    }\n\n    deleteValue(namespace: string, key: string): Promise<void> {\n        return DiskKVService._fileService.deleteFile(`${APIUtils.slugify(namespace)}/${APIUtils.slugify(key)}.json`).catch((e) => {\n            // Ignore errors\n            return;\n        });\n    }\n\n    updateExpiration(namespace: string, key: string, expirationInSeconds: number): Promise<void> {\n        return this._getValue(namespace, key).then((data) => {\n\n            if (isNil(data)) {\n                return Promise.resolve();\n            }\n\n            return this.setValue(namespace, key, data.value, expirationInSeconds);\n        });\n    }\n\n    async getValues(namespace: string, page: number, pageSize: number): Promise<KVServiceValues> {\n        let files = await DiskKVService._fileService.listFilesInPath(`${APIUtils.slugify(namespace)}`);\n\n        let values: KVServiceValue[] = [];\n        let totalCount = files.length;\n        let totalPages = Math.ceil(totalCount / pageSize);\n\n        if (page > 0 && page <= totalPages) {\n\n            let actions = [];\n            let startIndex = pageSize * (page - 1);\n            let endIndex = Math.min(startIndex + pageSize - 1, files.length - 1);\n\n            for(let index = startIndex; index <= endIndex; index++)\n            {\n                let filename = files[index];\n                actions.push(DiskKVService._fileService.readFile(`${APIUtils.slugify(namespace)}/${filename}`));\n            }\n\n            let results = await Promise.all(actions);\n\n            for(let result of results)\n            {\n                let parsedResult = JSON.parse(result);\n\n                if (parsedResult.expires && parsedResult.expires <= Date.now()) {\n                    continue;\n                }\n\n                values.push({\n                    key: parsedResult.key,\n                    value: parsedResult.value\n                });\n            }\n        }\n\n        return {\n            totalCount: totalCount,\n            totalPages: totalPages,\n            page: page,\n            values: values\n        };\n    }\n}"]}