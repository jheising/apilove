{"version":3,"file":"MemoryKVService.js","sourceRoot":"","sources":["MemoryKVService.ts"],"names":[],"mappings":";;AAAA,mCAA6B;AAC7B,4CAA+C;AAE/C,MAAa,eAAgB,SAAQ,6BAAiB;IAAtD;;QACY,UAAK,GAAG,EAAE,CAAC;IAuCvB,CAAC;IArCG,QAAQ,CAAC,SAAiB,EAAE,GAAW,EAAE,KAAU,EAAE,mBAA2B;QAC5E,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,GAAG;YAC1B,OAAO,EAAE,cAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,mBAAmB,GAAG,IAAI;YACzF,KAAK,EAAE,KAAK;SACf,CAAC;QAEF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,QAAQ,CAAC,SAAiB,EAAE,GAAW;QACnC,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IAED,QAAQ,CAAC,SAAiB,EAAE,GAAW;QACnC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC;QAEvC,IAAI,cAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE;YAC7D,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC5B;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAED,WAAW,CAAC,SAAiB,EAAE,GAAW;QACtC,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC;QACnC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,gBAAgB,CAAC,SAAiB,EAAE,GAAW,EAAE,mBAA2B;QACxE,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC;QAEvC,IAAI,CAAC,cAAK,CAAC,IAAI,CAAC,EAAE;YACd,IAAI,CAAC,UAAU,GAAG,cAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,mBAAmB,GAAG,IAAI,CAAC;SACtG;QAED,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;CACJ;AAxCD,0CAwCC","sourcesContent":["import {isNil} from \"lodash\";\nimport {KVServiceProvider} from \"../KVService\";\n\nexport class MemoryKVService extends KVServiceProvider {\n    private _data = {};\n\n    setValue(namespace: string, key: string, value: any, expirationInSeconds: number): Promise<void> {\n        this._data[namespace + key] = {\n            expires: isNil(expirationInSeconds) ? undefined : Date.now() + expirationInSeconds * 1000,\n            value: value\n        };\n\n        return Promise.resolve();\n    }\n\n    hasValue(namespace: string, key: string): Promise<boolean> {\n        return Promise.resolve((namespace + key) in this._data);\n    }\n\n    getValue(namespace: string, key: string): Promise<any> {\n        let data = this._data[namespace + key];\n\n        if (isNil(data) || (data.expires && data.expires <= Date.now())) {\n            return Promise.resolve();\n        }\n\n        return Promise.resolve(data.value);\n    }\n\n    deleteValue(namespace: string, key: string):Promise<void> {\n        delete this._data[namespace + key];\n        return Promise.resolve();\n    }\n\n    updateExpiration(namespace: string, key: string, expirationInSeconds: number):Promise<void> {\n        let data = this._data[namespace + key];\n\n        if (!isNil(data)) {\n            data.expiration = isNil(expirationInSeconds) ? undefined : Date.now() + expirationInSeconds * 1000;\n        }\n\n        return Promise.resolve();\n    }\n}"]}