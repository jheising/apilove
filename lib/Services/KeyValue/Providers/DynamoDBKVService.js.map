{"version":3,"file":"DynamoDBKVService.js","sourceRoot":"","sources":["DynamoDBKVService.ts"],"names":[],"mappings":"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","sourcesContent":["import {KVServiceProvider, KVServiceValues, KVServiceValue} from \"../KVService\";\nimport {isNil, get} from \"lodash\";\nimport * as aws from \"aws-sdk\";\nimport {APIConfig} from \"../../../APIConfig\";\n\nexport class DynamoDBKVService extends KVServiceProvider {\n    private static _dynamoClient;\n    static get dynamoClient() {\n        if (!DynamoDBKVService._dynamoClient) {\n            DynamoDBKVService._dynamoClient = new aws.DynamoDB();\n        }\n\n        return DynamoDBKVService._dynamoClient;\n    }\n\n    setValue(namespace: string, key: string, value: any, expirationInSeconds: number): Promise<void> {\n        value = JSON.stringify(value);\n\n        let data: any = {\n            namespace: {\n                S: namespace\n            },\n            key: {\n                S: key\n            },\n            value: {\n                S: value\n            },\n            expires: {\n                N: \"-1\"\n            }\n        };\n\n        if (!isNil(expirationInSeconds) && expirationInSeconds != -1) {\n            data.expires.N = Math.round(Date.now() / 1000 + expirationInSeconds).toString();\n        }\n\n        return DynamoDBKVService.dynamoClient.putItem({\n            Item: data,\n            TableName: APIConfig.DYNAMO_KV_STORAGE_TABLE_NAME,\n            ReturnConsumedCapacity: \"NONE\"\n        }).promise().then(() => Promise.resolve());\n    }\n\n    hasValue(namespace: string, key: string): Promise<boolean> {\n        return this.getValue(namespace, key).then((value) => Promise.resolve(!isNil(value)));\n    }\n\n    getValue(namespace: string, key: string): Promise<any> {\n        return DynamoDBKVService.dynamoClient.getItem({\n            Key: {\n                namespace: {\n                    S: namespace\n                },\n                key: {\n                    S: key\n                }\n            },\n            TableName: APIConfig.DYNAMO_KV_STORAGE_TABLE_NAME,\n            ReturnConsumedCapacity: \"NONE\",\n            AttributesToGet: [\"value\", \"expires\"]\n        }).promise().then((data) => {\n            let value = get(data, \"Item.value.S\");\n\n            let expires = get(data, \"Item.expires.N\", -1);\n            if (expires > 0) {\n                let now = Math.round(Date.now() / 1000);\n                if (expires <= now) {\n                    value = undefined;\n                }\n            }\n\n            if (!isNil(value)) {\n                value = JSON.parse(value);\n            }\n\n            return Promise.resolve(value);\n        });\n    }\n\n    deleteValue(namespace: string, key: string): Promise<void> {\n        return DynamoDBKVService.dynamoClient.deleteItem({\n            Key: {\n                namespace: {\n                    S: namespace\n                },\n                key: {\n                    S: key\n                }\n            },\n            TableName: APIConfig.DYNAMO_KV_STORAGE_TABLE_NAME,\n            ReturnConsumedCapacity: \"NONE\"\n        }).promise().then(() => Promise.resolve());\n    }\n\n    updateExpiration(namespace: string, key: string, expirationInSeconds: number): Promise<void> {\n        return DynamoDBKVService.dynamoClient.updateItem({\n            ExpressionAttributeNames: {\n                \"#AT\": \"expires\"\n            },\n            ExpressionAttributeValues: {\n                \":t\": {\n                    N: Math.round(Date.now() / 1000 + expirationInSeconds).toString()\n                }\n            },\n            Key: {\n                namespace: {\n                    S: namespace\n                },\n                key: {\n                    S: key\n                }\n            },\n            ReturnValues: \"NONE\",\n            TableName: APIConfig.DYNAMO_KV_STORAGE_TABLE_NAME,\n            UpdateExpression: \"SET #AT = :t\"\n        }).promise().then(() => Promise.resolve());\n    }\n\n    async getValues(namespace: string, page: number, pageSize: number): Promise<KVServiceValues> {\n\n        // Get our total count first\n        let totalCount = (await DynamoDBKVService.dynamoClient.query({\n            TableName: APIConfig.DYNAMO_KV_STORAGE_TABLE_NAME,\n            ExpressionAttributeValues: {\n                \":v1\": {\n                    S: namespace\n                }\n            },\n            KeyConditionExpression: `namespace = :v1`,\n            Select: \"COUNT\"\n        }).promise()).Count;\n\n        let totalPages = Math.ceil(totalCount / pageSize);\n\n        let values: KVServiceValue[] = [];\n\n        if (page > 0 && page <= totalPages) {\n\n            let currentPage = 1;\n\n            async function doQuery(lastEvaluatedKey?: any) {\n\n                let queryOptions: any = {\n                    TableName: APIConfig.DYNAMO_KV_STORAGE_TABLE_NAME,\n                    ExpressionAttributeValues: {\n                        \":v1\": {\n                            S: namespace\n                        }\n                    },\n                    KeyConditionExpression: `namespace = :v1`,\n                    Select: currentPage === page ? \"ALL_ATTRIBUTES\" : \"COUNT\",\n                    Limit: pageSize\n                };\n\n                if (lastEvaluatedKey) {\n                    queryOptions.ExclusiveStartKey = lastEvaluatedKey;\n                }\n\n                let results = await DynamoDBKVService.dynamoClient.query(queryOptions).promise();\n\n                ++currentPage;\n\n                if (currentPage <= page && !isNil(results.LastEvaluatedKey)) {\n                    await doQuery(results.LastEvaluatedKey);\n                } else {\n                    for (let item of results.Items) {\n                        let value = get(item, \"value.S\");\n\n                        let expires = get(item, \"expires.N\", -1);\n                        if (expires > 0) {\n                            let now = Math.round(Date.now() / 1000);\n                            if (expires <= now) {\n                                continue;\n                            }\n                        }\n\n                        if (!isNil(value)) {\n                            value = JSON.parse(value);\n                        }\n\n                        values.push({\n                            key: get(item, \"key.S\"),\n                            value: value\n                        });\n                    }\n                }\n            }\n\n            await doQuery();\n        }\n\n        return {\n            values: values,\n            totalCount: totalCount,\n            totalPages: totalPages,\n            page: page\n        };\n    }\n}"]}