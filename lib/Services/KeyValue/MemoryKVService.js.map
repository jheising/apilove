{"version":3,"file":"MemoryKVService.js","sourceRoot":"","sources":["MemoryKVService.ts"],"names":[],"mappings":";;AAAA,mCAA6B;AAC7B,2CAAsC;AAEtC,qBAA6B,SAAQ,qBAAS;IAA9C;;QAEY,UAAK,GAAG,EAAE,CAAC;IAkDvB,CAAC;IAhDG,QAAQ,CAAC,SAAgB,EAAE,GAAU,EAAE,KAAS,EAAE,mBAA0B,EAAE,IAA2B;QAErG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,GAAG;YAC1B,OAAO,EAAE,cAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,mBAAmB,GAAG,IAAI;YACzF,KAAK,EAAE,KAAK;SACf,CAAC;QAEF,IAAG,IAAI;YAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAED,QAAQ,CAAC,SAAgB,EAAE,GAAU,EAAE,IAA8C;QAEjF,IAAG,IAAI,EACP;YACI,IAAI,CAAC,IAAI,EAAE,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;SAC/C;IACL,CAAC;IAED,QAAQ,CAAC,SAAgB,EAAE,GAAU,EAAE,IAAuC;QAE1E,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC;QAEvC,IAAG,cAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,EAC9D;YACI,IAAG,IAAI;gBAAE,IAAI,EAAE,CAAC;YAChB,OAAO;SACV;QAED,IAAG,IAAI;YAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAED,WAAW,CAAC,SAAgB,EAAE,GAAU,EAAE,IAA2B;QAEjE,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC;QACnC,IAAG,IAAI;YAAE,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,gBAAgB,CAAC,SAAgB,EAAE,GAAU,EAAE,mBAA0B,EAAE,IAA2B;QAElG,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC;QAEvC,IAAG,CAAC,cAAK,CAAC,IAAI,CAAC,EACf;YACI,IAAI,CAAC,UAAU,GAAG,cAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,mBAAmB,GAAG,IAAI,CAAC;SACtG;QAED,IAAG,IAAI;YAAE,IAAI,EAAE,CAAC;IACpB,CAAC;CACJ;AApDD,0CAoDC","sourcesContent":["import {isNil} from \"lodash\";\nimport {KVService} from \"./KVService\";\n\nexport class MemoryKVService extends KVService\n{\n    private _data = {};\n\n    setValue(namespace:string, key:string, value:any, expirationInSeconds:number, done:(error?:Error) => void)\n    {\n        this._data[namespace + key] = {\n            expires: isNil(expirationInSeconds) ? undefined : Date.now() + expirationInSeconds * 1000,\n            value: value\n        };\n\n        if(done) done(null);\n    }\n\n    hasValue(namespace:string, key:string, done:(error?:Error, hasValue?:boolean) => void)\n    {\n        if(done)\n        {\n            done(null, (namespace + key) in this._data);\n        }\n    }\n\n    getValue(namespace:string, key:string, done:(error?:Error, value?:any) => void)\n    {\n        let data = this._data[namespace + key];\n\n        if(isNil(data) || (data.expires && data.expires <= Date.now()))\n        {\n            if(done) done();\n            return;\n        }\n\n        if(done) done(null, data.value);\n    }\n\n    deleteValue(namespace:string, key:string, done:(error?:Error) => void)\n    {\n        delete this._data[namespace + key];\n        if(done) done();\n    }\n\n    updateExpiration(namespace:string, key:string, expirationInSeconds:number, done:(error?:Error) => void)\n    {\n        let data = this._data[namespace + key];\n\n        if(!isNil(data))\n        {\n            data.expiration = isNil(expirationInSeconds) ? undefined : Date.now() + expirationInSeconds * 1000;\n        }\n\n        if(done) done();\n    }\n}"]}