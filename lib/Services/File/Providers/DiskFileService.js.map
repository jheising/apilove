{"version":3,"file":"DiskFileService.js","sourceRoot":"","sources":["DiskFileService.ts"],"names":[],"mappings":"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","sourcesContent":["import {FileServiceProvider} from \"../FileService\";\nimport path from \"path\";\nimport {APIConfig} from \"../../../APIConfig\";\nimport fs from \"fs-extra\";\nimport {each} from \"async\";\nimport util from \"util\";\nimport {APIError} from \"../../../APIError\";\nimport isString from \"lodash/isString\";\nimport {APIUtils} from \"../../../APIUtils\";\n\nexport class DiskFileService implements FileServiceProvider {\n    private readonly _rootPath: string;\n\n    constructor(rootPath: string = APIConfig.DISK_FILE_SERVICE_ROOT_PATH) {\n        this._rootPath = path.resolve(process.cwd(), rootPath);\n        fs.ensureDirSync(this._rootPath);\n    }\n\n    private _isInvalidFilePath(filePath: string): Promise<void> {\n        let resolvedPath = path.normalize(filePath);\n\n        // Don't allow any paths that are below our root\n        let isInvalid = resolvedPath.indexOf(this._rootPath) !== 0;\n\n        if (isInvalid) {\n            return Promise.reject(new Error(\"invalid file path\"));\n        }\n\n        return Promise.resolve();\n    }\n\n    writeFile(relativePath: string, contents: string | Buffer, encrypted:boolean = false): Promise<void> {\n\n        if(encrypted)\n        {\n            throw new Error(\"Encryption not supported\");\n        }\n\n        let filePath = path.join(this._rootPath, relativePath);\n\n        return this._isInvalidFilePath(filePath)\n            .then(() => util.promisify(fs.outputFile)(filePath, contents));\n    }\n\n    readFile(relativePath: string, returnAsBuffer:boolean, encrypted:boolean = false): Promise<string | Buffer> {\n\n        if(encrypted)\n        {\n            throw new Error(\"Encryption not supported\");\n        }\n\n        let filePath = path.join(this._rootPath, relativePath);\n        return this._isInvalidFilePath(filePath)\n            .then(() => util.promisify(fs.readFile)(filePath))\n            .then((fileContents) => returnAsBuffer ? fileContents : fileContents.toString())\n            .catch((error) => Promise.reject(error.code === \"ENOENT\" ? APIError.create404NotFoundError() : error));\n    }\n\n    pathExists(relativePath: string): Promise<boolean> {\n        let filePath = path.join(this._rootPath, relativePath);\n        return this._isInvalidFilePath(filePath).then(() => util.promisify(fs.pathExists)(filePath));\n    }\n\n    deleteFile(relativePath: string): Promise<void> {\n        let filePath = path.join(this._rootPath, relativePath);\n        return this._isInvalidFilePath(filePath)\n            .then(() => util.promisify(fs.unlink)(filePath))\n            .catch((error) => Promise.reject(error.code === \"ENOENT\" ? APIError.create404NotFoundError() : error));\n    }\n\n    listDirectoriesInPath(relativePath: string): Promise<string[]> {\n        let directoryPath = path.join(this._rootPath, relativePath);\n        return this._isInvalidFilePath(directoryPath).then(() => {\n\n            return util.promisify(fs.readdir)(directoryPath)\n                .then((items) => {\n                    return new Promise<string[]>((resolve, reject) => {\n                        let directories = [];\n\n                        each(items, function (item, callback) {\n                            fs.stat(path.join(directoryPath, item), function (err, stats) {\n                                if (!err && stats.isDirectory()) {\n                                    directories.push(item);\n                                }\n\n                                callback();\n                            });\n                        }, (err) => {\n\n                            if (err) {\n                                reject(err);\n                                return;\n                            }\n\n                            resolve(directories);\n                        });\n                    });\n                })\n                .catch((error) => {\n                    if (error.code === \"ENOENT\") {\n                        return Promise.reject(APIError.create404NotFoundError());\n                    }\n\n                    return Promise.reject(error);\n                });\n        });\n    }\n\n    listFilesInPath(relativePath: string): Promise<string[]> {\n        let directoryPath = path.join(this._rootPath, relativePath);\n        return this._isInvalidFilePath(directoryPath).then(() => {\n\n            return util.promisify(fs.readdir)(directoryPath)\n                .then((items) => {\n                    return new Promise<string[]>((resolve, reject) => {\n                        let files = [];\n\n                        each(items, function (item, callback) {\n                            fs.stat(path.join(directoryPath, item), function (err, stats) {\n                                if (!err && stats.isFile()) {\n                                    files.push(item);\n                                }\n\n                                callback();\n                            });\n                        }, (err) => {\n\n                            if (err) {\n                                reject(err);\n                                return;\n                            }\n\n                            resolve(files.sort());\n                        });\n                    });\n                })\n                .catch((error) => {\n                    if (error.code === \"ENOENT\") {\n                        return Promise.reject(APIError.create404NotFoundError());\n                    }\n\n                    return Promise.reject(error);\n                });\n        });\n    }\n\n    copyFile(fromRelativePath: string, toRelativePath: string): Promise<void> {\n\n        let fromFilePath = path.join(this._rootPath, fromRelativePath);\n        let toFilePath = path.join(this._rootPath, toRelativePath);\n\n        return this._isInvalidFilePath(toFilePath)\n            .then(() => util.promisify(fs.copy)(fromFilePath, toFilePath))\n            .catch((error) => Promise.reject(error.code === \"ENOENT\" ? APIError.create404NotFoundError() : error));\n    }\n}"]}