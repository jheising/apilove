{"version":3,"file":"S3FileService.js","sourceRoot":"","sources":["S3FileService.ts"],"names":[],"mappings":"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","sourcesContent":["import * as aws from \"aws-sdk\";\nimport {FileServiceProvider} from \"../FileService\";\nimport {APIConfig} from \"../../../APIConfig\";\nimport {each} from \"async\";\nimport {get} from \"lodash\";\n\nexport class S3FileService implements FileServiceProvider {\n    private readonly _bucketName: string;\n\n    private static _s3Client;\n    static get s3Client() {\n        if (!S3FileService._s3Client) {\n            S3FileService._s3Client = new aws.S3();\n        }\n\n        return S3FileService._s3Client;\n    }\n\n    constructor(bucketName: string = APIConfig.S3_FILE_SERVICE_BUCKET_NAME) {\n        this._bucketName = bucketName;\n    }\n\n    writeFile(relativePath: string, contents: string): Promise<void> {\n        let params = {\n            Bucket: this._bucketName,\n            Key: relativePath,\n            Body: contents\n        };\n        return S3FileService.s3Client.putObject(params).promise();\n    }\n\n    readFile(relativePath: string): Promise<string> {\n        let params = {\n            Bucket: this._bucketName,\n            Key: relativePath\n        };\n\n        return S3FileService.s3Client.getObject(params).promise().then(data => {\n            return data.Body.toString(\"utf-8\");\n        });\n    }\n\n    pathExists(relativePath: string): Promise<boolean> {\n        let params = {\n            Bucket: this._bucketName,\n            Prefix: relativePath,\n            MaxKeys: 1\n        };\n        return S3FileService.s3Client.listObjectsV2(params).promise().then(data => {\n            return data.KeyCount > 0;\n        }).catch(error => {\n            return false;\n        });\n    }\n\n    deleteFile(relativePath: string): Promise<void> {\n        let params = {\n            Bucket: this._bucketName,\n            Key: relativePath\n        };\n        return S3FileService.s3Client.deleteObject(params).promise();\n    }\n\n    listDirectoriesInPath(relativePath: string): Promise<string[]> {\n\n        // Append a / if there isn't one\n        if(!(/\\/$/.test(relativePath)))\n        {\n            relativePath += \"/\";\n        }\n\n        let params = {\n            Bucket: this._bucketName,\n            Delimiter: \"/\",\n            Prefix: relativePath\n        };\n        return S3FileService.s3Client.listObjectsV2(params).promise().then(data => {\n            let dirs:string[] = [];\n\n            let commonPrefixes = get(data, \"CommonPrefixes\", []);\n\n            for(let commonPrefix of commonPrefixes)\n            {\n                let dirName:string = commonPrefix.Prefix.replace(relativePath, \"\");\n\n                if(/.+\\/$/.test(dirName))\n                {\n                    dirs.push(dirName.replace(/(.+)\\/$/, \"$1\"));\n                }\n            }\n\n            return dirs;\n        });\n    }\n\n    copyFile(fromRelativePath: string, toRelativePath: string): Promise<void> {\n        let params = {\n            Bucket: this._bucketName,\n            CopySource: fromRelativePath,\n            Key: toRelativePath\n        };\n        return S3FileService.s3Client.copyObject(params).promise();\n    }\n}"]}