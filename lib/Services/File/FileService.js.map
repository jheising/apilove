{"version":3,"file":"FileService.js","sourceRoot":"","sources":["FileService.ts"],"names":[],"mappings":";;AAAA,+CAA0C;AAE1C;CAMC;AAND,kDAMC;AAED;IAGY,MAAM,KAAK,SAAS;QACxB,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE;YAChC,IAAI,aAAa,GAAG,OAAO,CAAC,eAAe,qBAAS,CAAC,6BAA6B,EAAE,CAAC,CAAC,qBAAS,CAAC,6BAA6B,CAAC,CAAC;YAC/H,WAAW,CAAC,iBAAiB,GAAG,IAAI,aAAa,EAAE,CAAC;SACvD;QAED,OAAO,WAAW,CAAC,iBAAiB,CAAC;IACzC,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,YAAoB,EAAE,QAAgB;QACnD,OAAO,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IACnE,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,YAAoB;QAChC,OAAO,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACxD,CAAC;IAED,MAAM,CAAC,qBAAqB,CAAC,YAAoB;QAC7C,OAAO,WAAW,CAAC,SAAS,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;IACrE,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,YAAoB;QAClC,OAAO,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IAC1D,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,YAAoB;QAElC,OAAO,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IAC1D,CAAC;CACJ;AAhCD,kCAgCC","sourcesContent":["import {APIConfig} from \"../../APIConfig\";\n\nexport abstract class FileServiceProvider {\n    abstract writeFile(relativePath: string, contents: string):Promise<void>;\n    abstract readFile(relativePath: string):Promise<string>;\n    abstract listDirectoriesInPath(relativePath: string):Promise<string[]>;\n    abstract fileExists(relativePath: string):Promise<boolean>;\n    abstract deleteFile(relativePath: string):Promise<void>;\n}\n\nexport class FileService {\n\n    private static _providerInstance: FileServiceProvider;\n    private static get _provider(): FileServiceProvider {\n        if (!FileService._providerInstance) {\n            let providerClass = require(`./Providers/${APIConfig.FILE_STORAGE_SERVICE_PROVIDER}`)[APIConfig.FILE_STORAGE_SERVICE_PROVIDER];\n            FileService._providerInstance = new providerClass();\n        }\n\n        return FileService._providerInstance;\n    }\n\n    static writeFile(relativePath: string, contents: string):Promise<void> {\n        return FileService._provider.writeFile(relativePath, contents);\n    }\n\n    static readFile(relativePath: string):Promise<string> {\n        return FileService._provider.readFile(relativePath);\n    }\n\n    static listDirectoriesInPath(relativePath: string):Promise<string[]> {\n        return FileService._provider.listDirectoriesInPath(relativePath);\n    }\n\n    static fileExists(relativePath: string):Promise<boolean> {\n        return FileService._provider.fileExists(relativePath);\n    }\n\n    static deleteFile(relativePath: string):Promise<void>\n    {\n        return FileService._provider.deleteFile(relativePath);\n    }\n}"]}