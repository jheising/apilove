{"version":3,"file":"APIBase.js","sourceRoot":"","sources":["APIBase.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from \"express\";\nimport {defaults, get, set, isNil, each, map, toString, toNumber, isArray, castArray, isString, isNaN} from \"lodash\";\nimport \"reflect-metadata\";\nimport {Utils} from \"./Utils\";\nimport {APIConfig} from \"./APIConfig\";\nimport * as shortid from \"shortid\";\n\ninterface HandlerParameterData {\n    paramType: string;\n    paramName: string;\n    paramOptions: APIParameterOptions;\n}\n\ninterface HandlerData {\n    options: APIEndpointOptions;\n    handlerFunction: Function;\n    handlerParameterNames: string[];\n    handlerParameterData: { [paramIndex: number]: HandlerParameterData };\n}\n\nexport type APIParameterSource =\n    \"param\" | // Parameters in the URL, like /foo/:bar\n    \"query\" | // Query parameters in the URL, like /foo?what=bar\n    \"body\" | // The full body. If sent in JSON or application/x-www-form-urlencoded it will be converted to an object. If this is specified, it will override all others.\n    \"cookie\" | // Cookies\n    \"header\" | // Headers\n    \"any\"; // All of the above (except for body)\n\nexport interface APIParameterOptions {\n\n    // If set to true, an error will not be thrown if the value is not sent\n    optional?: boolean;\n\n    // A default value to be used if one can't be found. This would be an equivalent shortcut for setting optional=true and providing a default value for your method property\n    defaultValue?: any;\n\n    // A synchronous function that can be used to transform an incoming parameter into something else. Can also be used as validation by throwing an error.\n    // You also get access to the raw express.js req object if you want it.\n    processor?: (value: any, req?) => any;\n\n    // One or more sources from which to look for this value. \"any\" is the default value\n    sources?: APIParameterSource | APIParameterSource[];\n\n    // This is the raw name of the parameter to look for in cases where the name can't be represented as a valid javascript variable name.\n    // Examples usages might be when looking for a header like \"content-type\" or a parameter named \"function\"\n    rawName?: string;\n}\n\nexport function APIParameter(options: APIParameterOptions) {\n    return function (target: Object, key: string | symbol, parameterIndex: number) {\n        let handlerData: HandlerData = get(target.constructor.prototype, `__handlerData.${key.toString()}`, {});\n        set(handlerData, `handlerParameterData.${parameterIndex}.paramOptions`, options);\n        set(target.constructor.prototype, `__handlerData.${key.toString()}`, handlerData);\n    }\n}\n\nexport interface APIEndpointOptions {\n    // The method to be used when requesting this endpoint. Defaults to \"get\".\n    method?: string;\n\n    // The path to reach this endpoint. Defaults to \"/\".\n    path?: string;\n\n    // Any express.js middleware functions you want to be executed before invoking this method. Useful for things like authentication.\n    middleware?: Function[];\n}\n\nexport function APIEndpoint(options?: APIEndpointOptions) {\n    return function (target, key, descriptor) {\n\n        options = defaults({}, options, {\n            method: \"get\",\n            path: \"/\"\n        });\n\n        let handlerData: HandlerData = get(target.constructor.prototype, `__handlerData.${key.toString()}`, {});\n\n        handlerData.handlerFunction = descriptor.value;\n        handlerData.options = options;\n\n        let parameterMetadata = Reflect.getMetadata(\"design:paramtypes\", target, key);\n        let parameterNames = Utils.getFunctionParamNames(descriptor.value);\n\n        handlerData.handlerParameterNames = parameterNames;\n\n        for (let parameterIndex = 0; parameterIndex < parameterNames.length; parameterIndex++) {\n            set(handlerData, `handlerParameterData.${parameterIndex}.paramType`, Utils.getRawTypeName(parameterMetadata[parameterIndex].prototype));\n            set(handlerData, `handlerParameterData.${parameterIndex}.paramName`, parameterNames[parameterIndex]);\n        }\n\n        set(target.constructor.prototype, `__handlerData.${key.toString()}`, handlerData);\n    }\n}\n\nexport class APIError {\n    id: string;\n    friendlyMessage: any;\n    rawError: Error;\n    statusCode: number;\n    extraData: any;\n\n    constructor(friendlyMessage: any, rawError?: Error, statusCode: number = 500, extraData?: any) {\n        this.id = shortid.generate();\n        this.friendlyMessage = friendlyMessage;\n        this.rawError = rawError;\n        this.statusCode = statusCode;\n        this.extraData = extraData;\n    }\n\n    static createValidationError(errors: { parameter: string, message: string }[]) {\n        return new APIError(\"validation_error\", null, 400, errors);\n    }\n\n    static _rawErrorOut(error: Error) {\n\n        //stack = stack.split('\\n').map(function (line) { return line.trim(); });\n\n        let errorData: any = {\n            \"error\": error.toString()\n        };\n\n        let stack = error.stack;\n        if (stack) {\n            errorData.stack = stack.split('\\n').map(function (line) {\n                return line.trim();\n            }).slice(1);\n        }\n\n        return errorData\n    }\n\n    out(includeRawError: boolean = APIConfig.DISPLAY_RAW_ERRORS) {\n        let output: any = {\n            \"error\": {\n                \"id\": this.id,\n                \"message\": this.friendlyMessage,\n                \"details\": this.extraData,\n            }\n        };\n\n        if (includeRawError && !isNil(this.rawError)) {\n            output.error.raw_error = APIError._rawErrorOut(this.rawError);\n        }\n\n        return output;\n    }\n\n    hapiOut(includeRawError: boolean = APIConfig.DISPLAY_RAW_ERRORS) {\n        let output: any = {\n            \"this\": \"failed\",\n            \"with\": this.statusCode,\n            \"because\": {\n                \"id\": this.id,\n                \"message\": this.friendlyMessage,\n                \"details\": this.extraData\n            }\n        };\n\n        if (includeRawError && !isNil(this.rawError)) {\n            output.because.raw_error = APIError._rawErrorOut(this.rawError);\n        }\n\n        return output;\n    }\n}\n\nexport class APIResponse {\n    req;\n    res;\n\n    constructor(req?, res?) {\n        this.req = req;\n        this.res = res;\n    }\n\n    processHandlerFunction(target: any, handlerFunction: Function, handlerArgs: any[] = []) {\n        // Add the req, and res to the end arguments if the function wants it\n        handlerArgs = handlerArgs.concat([this.req, this.res]);\n\n        let handlerPromise = handlerFunction.apply(target, handlerArgs);\n        if (!(handlerPromise instanceof Promise)) {\n            throw new Error(`API function named '${handlerFunction.name}' doesn't return a promise.`);\n        }\n        else {\n            handlerPromise.then((data: any) => {\n                this.withSuccess(data)\n            }).catch((error: any) => {\n                this.withError(error);\n            });\n        }\n    }\n\n    withError(error: any, hapiOutput: boolean = APIConfig.OUTPUT_HAPI_RESULTS) {\n        if (isNil(error)) {\n            return false;\n        }\n\n        let apiError: APIError;\n\n        if (error instanceof APIError) {\n            apiError = error;\n        }\n        else {\n            apiError = new APIError(\"unknown\", error);\n        }\n\n        if ((apiError.statusCode >= 500 && apiError.statusCode <= 599 && APIConfig.LOG_500_ERRORS) ||\n            (apiError.statusCode >= 400 && apiError.statusCode <= 499 && APIConfig.LOG_400_ERRORS)) {\n            console.error(JSON.stringify(apiError.out(true)));\n        }\n\n        this.res.status(apiError.statusCode).send(hapiOutput ? apiError.hapiOut() : apiError.out());\n    }\n\n    withSuccess(data?: any, statusCode: number = 200, hapiOutput: boolean = APIConfig.OUTPUT_HAPI_RESULTS) {\n\n        let output = data;\n\n        if (hapiOutput) {\n            output = {\n                \"this\": \"succeeded\",\n                \"with\": data\n            }\n        }\n\n        this.res.status(statusCode).send(output);\n    }\n}\n\nexport class APIBase {\n    app = express.Router();\n\n    private _createHandlerWrapperFunction(handlerData: HandlerData) {\n\n        return (req, res) => {\n            let apiResponse = new APIResponse(req, res);\n\n            let handlerArgs = [];\n            let validationErrors: { parameter: string, message: string }[] = [];\n\n            // Loop through each parameter in our function and pull it from the request\n            for (let index = 0; index < handlerData.handlerParameterNames.length; index++) {\n                let paramData: HandlerParameterData = handlerData.handlerParameterData[index];\n                let paramOptions: APIParameterOptions = get(paramData, \"paramOptions\", {});\n                let paramName = Utils.coalesce(paramOptions.rawName, handlerData.handlerParameterNames[index]);\n\n                // Ignore request and response parameters if the function asks for it\n                if ((index === handlerData.handlerParameterNames.length - 1 || index === handlerData.handlerParameterNames.length - 2) && [\"req\", \"request\", \"res\", \"response\"].indexOf(paramName.toLowerCase()) >= 0) {\n                    continue;\n                }\n\n                let paramSources: APIParameterSource[] = castArray(get(paramOptions, \"sources\", [\"any\"]));\n                let paramValues = [];\n\n                if (paramSources.indexOf(\"body\") !== -1) {\n\n                    let bodyValue = req.body;\n\n                    if(!isNil(bodyValue))\n                    {\n                        paramValues.push(bodyValue);\n                    }\n                }\n                else {\n                    for (let paramSource of paramSources) {\n                        if (paramSource === \"param\" || paramSource === \"any\") {\n                            paramValues.push(req.params[paramName]);\n                        }\n                        if (paramSource === \"query\" || paramSource === \"any\") {\n                            paramValues.push(req.query[paramName]);\n                        }\n                        if (paramSource === \"cookie\" || paramSource === \"any\") {\n                            paramValues.push(get(req, \"cookie\", {})[paramName]);\n                        }\n                        if (paramSource === \"header\" || paramSource === \"any\") {\n                            paramValues.push(req.get(paramName));\n                        }\n                    }\n                }\n\n                // Add a default value to the possible options\n                paramValues.push(paramOptions.defaultValue);\n\n                let argValue = Utils.coalesce.apply(Utils, paramValues);\n\n                if (paramOptions.processor) {\n                    try {\n                        argValue = paramOptions.processor(argValue, req);\n                    }\n                    catch (error) {\n                        validationErrors.push({\n                            parameter: paramName,\n                            message: error.message || error.toString()\n                        });\n                        continue;\n                    }\n                }\n\n                if (isNil(argValue)) {\n\n                    // Is this parameter required?\n                    if (!get(paramOptions, \"optional\", false)) {\n                        validationErrors.push({\n                            parameter: paramName,\n                            message: \"missing\"\n                        });\n                    }\n\n                    handlerArgs.push(undefined);\n                    continue;\n                }\n\n                argValue = Utils.convertToType(argValue, paramData.paramType);\n\n                if(isNil(argValue) || isNaN(argValue))\n                {\n                    validationErrors.push({\n                        parameter: paramName,\n                        message: \"invalid\"\n                    });\n                    continue;\n                }\n\n                handlerArgs.push(argValue);\n            }\n\n            if (validationErrors.length > 0) {\n                apiResponse.withError(APIError.createValidationError(validationErrors));\n                return;\n            }\n\n            apiResponse.processHandlerFunction(this, handlerData.handlerFunction, handlerArgs);\n        };\n    }\n\n    constructor() {\n        each(this.constructor.prototype.__handlerData, (handlerData: HandlerData) => {\n            let options: APIEndpointOptions = handlerData.options;\n            let argsArray: any[] = [options.path];\n\n            if (options.middleware) {\n                argsArray = argsArray.concat(options.middleware);\n            }\n\n            let handlerWrapper = this._createHandlerWrapperFunction(handlerData);\n            argsArray.push(handlerWrapper);\n            this.app[options.method.toLowerCase()].apply(this.app, argsArray);\n        });\n    }\n}"]}