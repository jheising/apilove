{"version":3,"file":"APILove.js","sourceRoot":"","sources":["APILove.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from \"express\";\nimport * as bodyParser from \"body-parser\";\nimport * as cookieParser from \"cookie-parser\";\nimport {get, isNil} from \"lodash\";\nimport {APIBase, APIResponse} from \"./lib/APIBase\";\nimport {APIConfig} from \"./lib/APIConfig\";\nimport * as path from \"path\";\nimport {Utils} from \"./lib/Utils\";\n\nexport interface APILoaderDefinition {\n    apiPath?: string;\n    require: string;\n    moduleName?: string;\n}\n\nexport interface APILoveOptions {\n    apis?: APILoaderDefinition[];\n    middleware?:any[];\n}\n\nexport class APILove {\n\n    private static _loadAPI(api: APILoaderDefinition): APIBase {\n\n        let apiModule;\n        try {\n            apiModule = require(path.resolve(process.cwd(), api.require));\n        }\n        catch (e) {\n            console.error(e);\n            return null;\n        }\n\n        if (isNil(apiModule)) {\n            return null;\n        }\n\n        let moduleName = Utils.coalesce(api.moduleName, path.basename(api.require));\n\n        let apiClass = Utils.coalesce(apiModule[moduleName], apiModule.default, apiModule);\n\n        return new apiClass();\n    }\n\n    static start(options: APILoveOptions) {\n\n        const app = express();\n\n        app.use(cookieParser());\n        app.use(bodyParser.json());\n        app.use(bodyParser.urlencoded({extended: false}));\n        app.use(bodyParser.text());\n\n        for (let mw of get(options, \"middleware\", [])) {\n            app.use(mw);\n        }\n\n        // Here we load our APIs, but we only load them when requested\n        for (let api of get(options, \"apis\", []) as APILoaderDefinition[]) {\n\n            if (isNil(api.apiPath)) {\n                api.apiPath = \"/\";\n            }\n\n            if (APIConfig.LAZY_LOAD_APIS) {\n\n                let apiInstance: APIBase;\n\n                app.use(api.apiPath, (req, res, next) => {\n\n                    // Lazy load our API\n                    if (!apiInstance) {\n                        apiInstance = APILove._loadAPI(api);\n\n                        if (!apiInstance) {\n                            console.error(`Failed to load API at '${api.require}'`);\n                            next();\n                            return;\n                        }\n                    }\n\n                    apiInstance.app(req, res, next);\n                });\n            }\n            else {\n                let apiInstance = APILove._loadAPI(api);\n\n                if (!apiInstance) {\n                    console.error(`Failed to load API at '${api.require}'`);\n                    continue;\n                }\n\n                app.use(api.apiPath, apiInstance.app);\n            }\n        }\n\n        // Default error handler\n        app.use((error, req, res, next) => {\n            let apiResponse = new APIResponse(res, res);\n            apiResponse.withError(error);\n        });\n\n        if (APIConfig.RUN_AS_SERVER) {\n            app.listen(APIConfig.WEB_PORT, () => console.log(`API listening on port ${APIConfig.WEB_PORT}`));\n            return app;\n        }\n        else {\n            let serverless = require(\"serverless-http\");\n            return serverless(app, {callbackWaitsForEmptyEventLoop: true});\n        }\n    }\n}\n\n// Re-export stuff\nexport * from \"./lib/APIBase\";\nexport * from \"./lib/APIConfig\";\nexport * from \"./lib/Services/Config\";"]}