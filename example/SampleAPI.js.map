{"version":3,"file":"SampleAPI.js","sourceRoot":"","sources":["SampleAPI.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,wCAA8D;AAE9D,eAAuB,SAAQ,iBAAO;IAAtC;;QAEI,SAAI,GAAG,SAAS,CAAC;IAiBrB,CAAC;IAXG,IAAI,CACA,IAAY,EAAE,kDAAkD;IAChE,IAAQ,EAAE,6CAA6C;IACvD,GAAI,EAAE,oCAAoC;IAC1C,GAAI,CAAC,qCAAqC;;QAG1C,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,OAAO,CAAC,OAAO,IAAI,cAAc,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAXG;IAJC,qBAAW,CAAC;QACT,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,YAAY;KACrB,CAAC;;;;qCAWD;AAlBL,8BAmBC","sourcesContent":["import {APIBase, APIEndpoint, APIParameter} from \"../APILove\";\n\nexport class SampleAPI extends APIBase {\n\n    blah = \"yo!sddf\";\n\n    @APIEndpoint({\n        method: \"POST\",\n        path: \"/foo/:what\"\n    })\n    fooX(\n        what: string, // This will be retrieved as a string from the URL\n        data:any, // The body will be parsed and sent back here\n        req?, // Access the raw express.js request\n        res? // Access the raw express.js response\n    ): Promise<any> {\n\n        return new Promise<any>((resolve, reject) => {\n            resolve(`foo ${what} with some ${this.blah}`);\n        });\n    }\n}"]}